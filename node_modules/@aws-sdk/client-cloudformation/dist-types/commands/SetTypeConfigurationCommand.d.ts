import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFormationClient";
import { SetTypeConfigurationInput, SetTypeConfigurationOutput } from "../models/models_0";
export interface SetTypeConfigurationCommandInput extends SetTypeConfigurationInput {
}
export interface SetTypeConfigurationCommandOutput extends SetTypeConfigurationOutput, __MetadataBearer {
}
/**
 * <p>Specifies the configuration data for a registered CloudFormation extension, in
 *          the given account and region.</p>
 *          <p>To view the current configuration data for an extension, refer to the
 *             <code>ConfigurationSchema</code> element of <a href="AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType</a>.
 *          For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the
 *             <i>CloudFormation User Guide</i>.</p>
 *          <important>
 *             <p>It's strongly recommended that you use dynamic references to restrict sensitive
 *             configuration definitions, such as third-party credentials. For more details on dynamic
 *             references, see <a href="https://docs.aws.amazon.com/">Using dynamic references to specify
 *                template values</a> in the <i>CloudFormation User
 *             Guide</i>.</p>
 *          </important>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFormationClient, SetTypeConfigurationCommand } from "@aws-sdk/client-cloudformation"; // ES Modules import
 * // const { CloudFormationClient, SetTypeConfigurationCommand } = require("@aws-sdk/client-cloudformation"); // CommonJS import
 * const client = new CloudFormationClient(config);
 * const command = new SetTypeConfigurationCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link SetTypeConfigurationCommandInput} for command's `input` shape.
 * @see {@link SetTypeConfigurationCommandOutput} for command's `response` shape.
 * @see {@link CloudFormationClientResolvedConfig | config} for CloudFormationClient's `config` shape.
 *
 */
export declare class SetTypeConfigurationCommand extends $Command<SetTypeConfigurationCommandInput, SetTypeConfigurationCommandOutput, CloudFormationClientResolvedConfig> {
    readonly input: SetTypeConfigurationCommandInput;
    constructor(input: SetTypeConfigurationCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetTypeConfigurationCommandInput, SetTypeConfigurationCommandOutput>;
    private serialize;
    private deserialize;
}
