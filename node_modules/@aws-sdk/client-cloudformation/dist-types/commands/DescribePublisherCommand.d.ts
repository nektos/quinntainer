import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFormationClient";
import { DescribePublisherInput, DescribePublisherOutput } from "../models/models_0";
export interface DescribePublisherCommandInput extends DescribePublisherInput {
}
export interface DescribePublisherCommandOutput extends DescribePublisherOutput, __MetadataBearer {
}
/**
 * <p>Returns information about a CloudFormation extension publisher.</p>
 *          <p>If you don't supply a <code>PublisherId</code>, and you have registered as an extension
 *          publisher, <code>DescribePublisher</code> returns information about your own publisher
 *          account.</p>
 *          <p>For more information on registering as a publisher, see:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html">RegisterPublisher</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html">Publishing
 *                   extensions to make them available for public use</a> in the <i>CloudFormation CLI User Guide</i>
 *                </p>
 *             </li>
 *          </ul>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFormationClient, DescribePublisherCommand } from "@aws-sdk/client-cloudformation"; // ES Modules import
 * // const { CloudFormationClient, DescribePublisherCommand } = require("@aws-sdk/client-cloudformation"); // CommonJS import
 * const client = new CloudFormationClient(config);
 * const command = new DescribePublisherCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link DescribePublisherCommandInput} for command's `input` shape.
 * @see {@link DescribePublisherCommandOutput} for command's `response` shape.
 * @see {@link CloudFormationClientResolvedConfig | config} for CloudFormationClient's `config` shape.
 *
 */
export declare class DescribePublisherCommand extends $Command<DescribePublisherCommandInput, DescribePublisherCommandOutput, CloudFormationClientResolvedConfig> {
    readonly input: DescribePublisherCommandInput;
    constructor(input: DescribePublisherCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePublisherCommandInput, DescribePublisherCommandOutput>;
    private serialize;
    private deserialize;
}
