import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { CloudFormationClient } from "./CloudFormationClient";
import { ActivateTypeCommandInput, ActivateTypeCommandOutput } from "./commands/ActivateTypeCommand";
import { BatchDescribeTypeConfigurationsCommandInput, BatchDescribeTypeConfigurationsCommandOutput } from "./commands/BatchDescribeTypeConfigurationsCommand";
import { CancelUpdateStackCommandInput, CancelUpdateStackCommandOutput } from "./commands/CancelUpdateStackCommand";
import { ContinueUpdateRollbackCommandInput, ContinueUpdateRollbackCommandOutput } from "./commands/ContinueUpdateRollbackCommand";
import { CreateChangeSetCommandInput, CreateChangeSetCommandOutput } from "./commands/CreateChangeSetCommand";
import { CreateStackCommandInput, CreateStackCommandOutput } from "./commands/CreateStackCommand";
import { CreateStackInstancesCommandInput, CreateStackInstancesCommandOutput } from "./commands/CreateStackInstancesCommand";
import { CreateStackSetCommandInput, CreateStackSetCommandOutput } from "./commands/CreateStackSetCommand";
import { DeactivateTypeCommandInput, DeactivateTypeCommandOutput } from "./commands/DeactivateTypeCommand";
import { DeleteChangeSetCommandInput, DeleteChangeSetCommandOutput } from "./commands/DeleteChangeSetCommand";
import { DeleteStackCommandInput, DeleteStackCommandOutput } from "./commands/DeleteStackCommand";
import { DeleteStackInstancesCommandInput, DeleteStackInstancesCommandOutput } from "./commands/DeleteStackInstancesCommand";
import { DeleteStackSetCommandInput, DeleteStackSetCommandOutput } from "./commands/DeleteStackSetCommand";
import { DeregisterTypeCommandInput, DeregisterTypeCommandOutput } from "./commands/DeregisterTypeCommand";
import { DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput } from "./commands/DescribeAccountLimitsCommand";
import { DescribeChangeSetCommandInput, DescribeChangeSetCommandOutput } from "./commands/DescribeChangeSetCommand";
import { DescribeChangeSetHooksCommandInput, DescribeChangeSetHooksCommandOutput } from "./commands/DescribeChangeSetHooksCommand";
import { DescribePublisherCommandInput, DescribePublisherCommandOutput } from "./commands/DescribePublisherCommand";
import { DescribeStackDriftDetectionStatusCommandInput, DescribeStackDriftDetectionStatusCommandOutput } from "./commands/DescribeStackDriftDetectionStatusCommand";
import { DescribeStackEventsCommandInput, DescribeStackEventsCommandOutput } from "./commands/DescribeStackEventsCommand";
import { DescribeStackInstanceCommandInput, DescribeStackInstanceCommandOutput } from "./commands/DescribeStackInstanceCommand";
import { DescribeStackResourceCommandInput, DescribeStackResourceCommandOutput } from "./commands/DescribeStackResourceCommand";
import { DescribeStackResourceDriftsCommandInput, DescribeStackResourceDriftsCommandOutput } from "./commands/DescribeStackResourceDriftsCommand";
import { DescribeStackResourcesCommandInput, DescribeStackResourcesCommandOutput } from "./commands/DescribeStackResourcesCommand";
import { DescribeStacksCommandInput, DescribeStacksCommandOutput } from "./commands/DescribeStacksCommand";
import { DescribeStackSetCommandInput, DescribeStackSetCommandOutput } from "./commands/DescribeStackSetCommand";
import { DescribeStackSetOperationCommandInput, DescribeStackSetOperationCommandOutput } from "./commands/DescribeStackSetOperationCommand";
import { DescribeTypeCommandInput, DescribeTypeCommandOutput } from "./commands/DescribeTypeCommand";
import { DescribeTypeRegistrationCommandInput, DescribeTypeRegistrationCommandOutput } from "./commands/DescribeTypeRegistrationCommand";
import { DetectStackDriftCommandInput, DetectStackDriftCommandOutput } from "./commands/DetectStackDriftCommand";
import { DetectStackResourceDriftCommandInput, DetectStackResourceDriftCommandOutput } from "./commands/DetectStackResourceDriftCommand";
import { DetectStackSetDriftCommandInput, DetectStackSetDriftCommandOutput } from "./commands/DetectStackSetDriftCommand";
import { EstimateTemplateCostCommandInput, EstimateTemplateCostCommandOutput } from "./commands/EstimateTemplateCostCommand";
import { ExecuteChangeSetCommandInput, ExecuteChangeSetCommandOutput } from "./commands/ExecuteChangeSetCommand";
import { GetStackPolicyCommandInput, GetStackPolicyCommandOutput } from "./commands/GetStackPolicyCommand";
import { GetTemplateCommandInput, GetTemplateCommandOutput } from "./commands/GetTemplateCommand";
import { GetTemplateSummaryCommandInput, GetTemplateSummaryCommandOutput } from "./commands/GetTemplateSummaryCommand";
import { ImportStacksToStackSetCommandInput, ImportStacksToStackSetCommandOutput } from "./commands/ImportStacksToStackSetCommand";
import { ListChangeSetsCommandInput, ListChangeSetsCommandOutput } from "./commands/ListChangeSetsCommand";
import { ListExportsCommandInput, ListExportsCommandOutput } from "./commands/ListExportsCommand";
import { ListImportsCommandInput, ListImportsCommandOutput } from "./commands/ListImportsCommand";
import { ListStackInstancesCommandInput, ListStackInstancesCommandOutput } from "./commands/ListStackInstancesCommand";
import { ListStackResourcesCommandInput, ListStackResourcesCommandOutput } from "./commands/ListStackResourcesCommand";
import { ListStacksCommandInput, ListStacksCommandOutput } from "./commands/ListStacksCommand";
import { ListStackSetOperationResultsCommandInput, ListStackSetOperationResultsCommandOutput } from "./commands/ListStackSetOperationResultsCommand";
import { ListStackSetOperationsCommandInput, ListStackSetOperationsCommandOutput } from "./commands/ListStackSetOperationsCommand";
import { ListStackSetsCommandInput, ListStackSetsCommandOutput } from "./commands/ListStackSetsCommand";
import { ListTypeRegistrationsCommandInput, ListTypeRegistrationsCommandOutput } from "./commands/ListTypeRegistrationsCommand";
import { ListTypesCommandInput, ListTypesCommandOutput } from "./commands/ListTypesCommand";
import { ListTypeVersionsCommandInput, ListTypeVersionsCommandOutput } from "./commands/ListTypeVersionsCommand";
import { PublishTypeCommandInput, PublishTypeCommandOutput } from "./commands/PublishTypeCommand";
import { RecordHandlerProgressCommandInput, RecordHandlerProgressCommandOutput } from "./commands/RecordHandlerProgressCommand";
import { RegisterPublisherCommandInput, RegisterPublisherCommandOutput } from "./commands/RegisterPublisherCommand";
import { RegisterTypeCommandInput, RegisterTypeCommandOutput } from "./commands/RegisterTypeCommand";
import { RollbackStackCommandInput, RollbackStackCommandOutput } from "./commands/RollbackStackCommand";
import { SetStackPolicyCommandInput, SetStackPolicyCommandOutput } from "./commands/SetStackPolicyCommand";
import { SetTypeConfigurationCommandInput, SetTypeConfigurationCommandOutput } from "./commands/SetTypeConfigurationCommand";
import { SetTypeDefaultVersionCommandInput, SetTypeDefaultVersionCommandOutput } from "./commands/SetTypeDefaultVersionCommand";
import { SignalResourceCommandInput, SignalResourceCommandOutput } from "./commands/SignalResourceCommand";
import { StopStackSetOperationCommandInput, StopStackSetOperationCommandOutput } from "./commands/StopStackSetOperationCommand";
import { TestTypeCommandInput, TestTypeCommandOutput } from "./commands/TestTypeCommand";
import { UpdateStackCommandInput, UpdateStackCommandOutput } from "./commands/UpdateStackCommand";
import { UpdateStackInstancesCommandInput, UpdateStackInstancesCommandOutput } from "./commands/UpdateStackInstancesCommand";
import { UpdateStackSetCommandInput, UpdateStackSetCommandOutput } from "./commands/UpdateStackSetCommand";
import { UpdateTerminationProtectionCommandInput, UpdateTerminationProtectionCommandOutput } from "./commands/UpdateTerminationProtectionCommand";
import { ValidateTemplateCommandInput, ValidateTemplateCommandOutput } from "./commands/ValidateTemplateCommand";
/**
 * <fullname>CloudFormation</fullname>
 *          <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure
 *          deployments predictably and repeatedly. You can use CloudFormation to leverage
 *             Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store,
 *             Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly
 *          reliable, highly scalable, cost-effective applications without creating or configuring the
 *          underlying Amazon Web Services infrastructure.</p>
 *          <p>With CloudFormation, you declare all your resources and dependencies in a template
 *          file. The template defines a collection of resources as a single unit called a stack.
 *             CloudFormation creates and deletes all member resources of the stack together and
 *          manages all dependencies between the resources for you.</p>
 *          <p>For more information about CloudFormation, see the <a href="http://aws.amazon.com/cloudformation/">CloudFormation product page</a>.</p>
 *          <p>CloudFormation makes use of other Amazon Web Services products. If you need
 *          additional technical information about a specific Amazon Web Services product, you can find
 *          the product's technical documentation at <a href="https://docs.aws.amazon.com/">
 *                <code>docs.aws.amazon.com</code>
 *             </a>.</p>
 */
export declare class CloudFormation extends CloudFormationClient {
    /**
     * <p>Activates a public third-party extension, making it available for use in stack
     *          templates. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html">Using
     *             public extensions</a> in the <i>CloudFormation User Guide</i>.</p>
     *          <p>Once you have activated a public third-party extension in your account and region, use
     *             <a href="AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a> to specify configuration properties for the extension. For
     *          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
     */
    activateType(args: ActivateTypeCommandInput, options?: __HttpHandlerOptions): Promise<ActivateTypeCommandOutput>;
    activateType(args: ActivateTypeCommandInput, cb: (err: any, data?: ActivateTypeCommandOutput) => void): void;
    activateType(args: ActivateTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ActivateTypeCommandOutput) => void): void;
    /**
     * <p>Returns configuration data for the specified CloudFormation extensions, from
     *          the CloudFormation registry for the account and region.</p>
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the
     *             <i>CloudFormation User Guide</i>.</p>
     */
    batchDescribeTypeConfigurations(args: BatchDescribeTypeConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<BatchDescribeTypeConfigurationsCommandOutput>;
    batchDescribeTypeConfigurations(args: BatchDescribeTypeConfigurationsCommandInput, cb: (err: any, data?: BatchDescribeTypeConfigurationsCommandOutput) => void): void;
    batchDescribeTypeConfigurations(args: BatchDescribeTypeConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDescribeTypeConfigurationsCommandOutput) => void): void;
    /**
     * <p>Cancels an update on the specified stack. If the call completes successfully, the stack
     *          rolls back the update and reverts to the previous stack configuration.</p>
     *          <note>
     *             <p>You can cancel only stacks that are in the <code>UPDATE_IN_PROGRESS</code>
     *             state.</p>
     *          </note>
     */
    cancelUpdateStack(args: CancelUpdateStackCommandInput, options?: __HttpHandlerOptions): Promise<CancelUpdateStackCommandOutput>;
    cancelUpdateStack(args: CancelUpdateStackCommandInput, cb: (err: any, data?: CancelUpdateStackCommandOutput) => void): void;
    cancelUpdateStack(args: CancelUpdateStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelUpdateStackCommandOutput) => void): void;
    /**
     * <p>For a specified stack that's in the <code>UPDATE_ROLLBACK_FAILED</code> state, continues
     *          rolling it back to the <code>UPDATE_ROLLBACK_COMPLETE</code> state. Depending on the cause
     *          of the failure, you can manually <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed"> fix the error</a> and continue the rollback. By continuing the rollback, you can
     *          return your stack to a working state (the <code>UPDATE_ROLLBACK_COMPLETE</code> state), and
     *          then try to update the stack again.</p>
     *          <p>A stack goes into the <code>UPDATE_ROLLBACK_FAILED</code> state when CloudFormation can't roll back all changes after a failed stack update. For example, you
     *          might have a stack that's rolling back to an old database instance that was deleted outside
     *          of CloudFormation. Because CloudFormation doesn't know the database was deleted, it
     *          assumes that the database instance still exists and attempts to roll back to it, causing
     *          the update rollback to fail.</p>
     */
    continueUpdateRollback(args: ContinueUpdateRollbackCommandInput, options?: __HttpHandlerOptions): Promise<ContinueUpdateRollbackCommandOutput>;
    continueUpdateRollback(args: ContinueUpdateRollbackCommandInput, cb: (err: any, data?: ContinueUpdateRollbackCommandOutput) => void): void;
    continueUpdateRollback(args: ContinueUpdateRollbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ContinueUpdateRollbackCommandOutput) => void): void;
    /**
     * <p>Creates a list of changes that will be applied to a stack so that you can review the
     *          changes before executing them. You can create a change set for a stack that doesn't exist
     *          or an existing stack. If you create a change set for a stack that doesn't exist, the change
     *          set shows all of the resources that CloudFormation will create. If you create a change
     *          set for an existing stack, CloudFormation compares the stack's information with the
     *          information that you submit in the change set and lists the differences. Use change sets to
     *          understand which resources CloudFormation will create or change, and how it will change
     *          resources in an existing stack, before you create or update a stack.</p>
     *          <p>To create a change set for a stack that doesn't exist, for the
     *             <code>ChangeSetType</code> parameter, specify <code>CREATE</code>. To create a change
     *          set for an existing stack, specify <code>UPDATE</code> for the <code>ChangeSetType</code>
     *          parameter. To create a change set for an import operation, specify <code>IMPORT</code> for
     *          the <code>ChangeSetType</code> parameter. After the <code>CreateChangeSet</code> call
     *          successfully completes, CloudFormation starts creating the change set. To check the
     *          status of the change set or to review it, use the <a>DescribeChangeSet</a>
     *          action.</p>
     *          <p>When you are satisfied with the changes the change set will make, execute the change set
     *          by using the <a>ExecuteChangeSet</a> action. CloudFormation doesn't make
     *          changes until you execute the change set.</p>
     *          <p>To create a change set for the entire stack hierarchy, set
     *             <code>IncludeNestedStacks</code> to <code>True</code>.</p>
     */
    createChangeSet(args: CreateChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateChangeSetCommandOutput>;
    createChangeSet(args: CreateChangeSetCommandInput, cb: (err: any, data?: CreateChangeSetCommandOutput) => void): void;
    createChangeSet(args: CreateChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChangeSetCommandOutput) => void): void;
    /**
     * <p>Creates a stack as specified in the template. After the call completes successfully, the
     *          stack creation starts. You can check the status of the stack through the <a>DescribeStacks</a>operation.</p>
     */
    createStack(args: CreateStackCommandInput, options?: __HttpHandlerOptions): Promise<CreateStackCommandOutput>;
    createStack(args: CreateStackCommandInput, cb: (err: any, data?: CreateStackCommandOutput) => void): void;
    createStack(args: CreateStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStackCommandOutput) => void): void;
    /**
     * <p>Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.
     *          You must specify at least one value for either <code>Accounts</code> or
     *             <code>DeploymentTargets</code>, and you must specify at least one value for
     *             <code>Regions</code>.</p>
     */
    createStackInstances(args: CreateStackInstancesCommandInput, options?: __HttpHandlerOptions): Promise<CreateStackInstancesCommandOutput>;
    createStackInstances(args: CreateStackInstancesCommandInput, cb: (err: any, data?: CreateStackInstancesCommandOutput) => void): void;
    createStackInstances(args: CreateStackInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStackInstancesCommandOutput) => void): void;
    /**
     * <p>Creates a stack set.</p>
     */
    createStackSet(args: CreateStackSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateStackSetCommandOutput>;
    createStackSet(args: CreateStackSetCommandInput, cb: (err: any, data?: CreateStackSetCommandOutput) => void): void;
    createStackSet(args: CreateStackSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStackSetCommandOutput) => void): void;
    /**
     * <p>Deactivates a public extension that was previously activated in this account and
     *          region.</p>
     *          <p>Once deactivated, an extension can't be used in any CloudFormation operation.
     *          This includes stack update operations where the stack template includes the extension, even
     *          if no updates are being made to the extension. In addition, deactivated extensions aren't
     *          automatically updated if a new version of the extension is released.</p>
     */
    deactivateType(args: DeactivateTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeactivateTypeCommandOutput>;
    deactivateType(args: DeactivateTypeCommandInput, cb: (err: any, data?: DeactivateTypeCommandOutput) => void): void;
    deactivateType(args: DeactivateTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeactivateTypeCommandOutput) => void): void;
    /**
     * <p>Deletes the specified change set. Deleting change sets ensures that no one executes the
     *          wrong change set.</p>
     *          <p>If the call successfully completes, CloudFormation successfully deleted the change
     *          set.</p>
     *          <p>If <code>IncludeNestedStacks</code> specifies <code>True</code> during the creation of
     *          the nested change set, then <code>DeleteChangeSet</code> will delete all change sets that
     *          belong to the stacks hierarchy and will also delete all change sets for nested stacks with
     *          the status of <code>REVIEW_IN_PROGRESS</code>.</p>
     */
    deleteChangeSet(args: DeleteChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChangeSetCommandOutput>;
    deleteChangeSet(args: DeleteChangeSetCommandInput, cb: (err: any, data?: DeleteChangeSetCommandOutput) => void): void;
    deleteChangeSet(args: DeleteChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChangeSetCommandOutput) => void): void;
    /**
     * <p>Deletes a specified stack. Once the call completes successfully, stack deletion starts.
     *          Deleted stacks don't show up in the <a>DescribeStacks</a> operation if the
     *          deletion has been completed successfully.</p>
     */
    deleteStack(args: DeleteStackCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStackCommandOutput>;
    deleteStack(args: DeleteStackCommandInput, cb: (err: any, data?: DeleteStackCommandOutput) => void): void;
    deleteStack(args: DeleteStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStackCommandOutput) => void): void;
    /**
     * <p>Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.</p>
     */
    deleteStackInstances(args: DeleteStackInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStackInstancesCommandOutput>;
    deleteStackInstances(args: DeleteStackInstancesCommandInput, cb: (err: any, data?: DeleteStackInstancesCommandOutput) => void): void;
    deleteStackInstances(args: DeleteStackInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStackInstancesCommandOutput) => void): void;
    /**
     * <p>Deletes a stack set. Before you can delete a stack set, all of its member stack
     *          instances must be deleted. For more information about how to do this, see <a>DeleteStackInstances</a>.</p>
     */
    deleteStackSet(args: DeleteStackSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStackSetCommandOutput>;
    deleteStackSet(args: DeleteStackSetCommandInput, cb: (err: any, data?: DeleteStackSetCommandOutput) => void): void;
    deleteStackSet(args: DeleteStackSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStackSetCommandOutput) => void): void;
    /**
     * <p>Marks an extension or extension version as <code>DEPRECATED</code> in the CloudFormation registry, removing it from active use. Deprecated extensions or
     *          extension versions cannot be used in CloudFormation operations.</p>
     *          <p>To deregister an entire extension, you must individually deregister all active versions
     *          of that extension. If an extension has only a single active version, deregistering that
     *          version results in the extension itself being deregistered and marked as deprecated in the
     *          registry.</p>
     *          <p>You can't deregister the default version of an extension if there are other active
     *          version of that extension. If you do deregister the default version of an extension, the
     *          extension type itself is deregistered as well and marked as deprecated.</p>
     *          <p>To view the deprecation status of an extension or extension version, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType</a>.</p>
     */
    deregisterType(args: DeregisterTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterTypeCommandOutput>;
    deregisterType(args: DeregisterTypeCommandInput, cb: (err: any, data?: DeregisterTypeCommandOutput) => void): void;
    deregisterType(args: DeregisterTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterTypeCommandOutput) => void): void;
    /**
     * <p>Retrieves your account's CloudFormation limits, such as the maximum number of stacks
     *          that you can create in your account. For more information about account limits, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">CloudFormation Quotas</a> in the
     *          <i>CloudFormation User Guide</i>.</p>
     */
    describeAccountLimits(args: DescribeAccountLimitsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountLimitsCommandOutput>;
    describeAccountLimits(args: DescribeAccountLimitsCommandInput, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
    describeAccountLimits(args: DescribeAccountLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
    /**
     * <p>Returns the inputs for the change set and a list of changes that CloudFormation will
     *          make if you execute the change set. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html">Updating Stacks Using Change Sets</a> in the CloudFormation User Guide.</p>
     */
    describeChangeSet(args: DescribeChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChangeSetCommandOutput>;
    describeChangeSet(args: DescribeChangeSetCommandInput, cb: (err: any, data?: DescribeChangeSetCommandOutput) => void): void;
    describeChangeSet(args: DescribeChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChangeSetCommandOutput) => void): void;
    /**
     * <p>Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.</p>
     */
    describeChangeSetHooks(args: DescribeChangeSetHooksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChangeSetHooksCommandOutput>;
    describeChangeSetHooks(args: DescribeChangeSetHooksCommandInput, cb: (err: any, data?: DescribeChangeSetHooksCommandOutput) => void): void;
    describeChangeSetHooks(args: DescribeChangeSetHooksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChangeSetHooksCommandOutput) => void): void;
    /**
     * <p>Returns information about a CloudFormation extension publisher.</p>
     *          <p>If you don't supply a <code>PublisherId</code>, and you have registered as an extension
     *          publisher, <code>DescribePublisher</code> returns information about your own publisher
     *          account.</p>
     *          <p>For more information on registering as a publisher, see:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html">RegisterPublisher</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html">Publishing
     *                   extensions to make them available for public use</a> in the <i>CloudFormation CLI User Guide</i>
     *                </p>
     *             </li>
     *          </ul>
     */
    describePublisher(args: DescribePublisherCommandInput, options?: __HttpHandlerOptions): Promise<DescribePublisherCommandOutput>;
    describePublisher(args: DescribePublisherCommandInput, cb: (err: any, data?: DescribePublisherCommandOutput) => void): void;
    describePublisher(args: DescribePublisherCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePublisherCommandOutput) => void): void;
    /**
     * <p>Returns information about a stack drift detection operation. A stack drift detection
     *          operation detects whether a stack's actual configuration differs, or has
     *             <i>drifted</i>, from it's expected configuration, as defined in the stack
     *          template and any values specified as template parameters. A stack is considered to have
     *          drifted if one or more of its resources have drifted. For more information on stack and
     *          resource drift, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
     *             Unregulated Configuration Changes to Stacks and Resources</a>.</p>
     *          <p>Use <a>DetectStackDrift</a> to initiate a stack drift detection operation.
     *             <code>DetectStackDrift</code> returns a <code>StackDriftDetectionId</code> you can use
     *          to monitor the progress of the operation using
     *             <code>DescribeStackDriftDetectionStatus</code>. Once the drift detection operation has
     *          completed, use <a>DescribeStackResourceDrifts</a> to return drift information
     *          about the stack and its resources.</p>
     */
    describeStackDriftDetectionStatus(args: DescribeStackDriftDetectionStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackDriftDetectionStatusCommandOutput>;
    describeStackDriftDetectionStatus(args: DescribeStackDriftDetectionStatusCommandInput, cb: (err: any, data?: DescribeStackDriftDetectionStatusCommandOutput) => void): void;
    describeStackDriftDetectionStatus(args: DescribeStackDriftDetectionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackDriftDetectionStatusCommandOutput) => void): void;
    /**
     * <p>Returns all stack related events for a specified stack in reverse chronological order.
     *          For more information about a stack's event history, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html">Stacks</a> in the
     *          CloudFormation User Guide.</p>
     *          <note>
     *             <p>You can list events for stacks that have failed to create or have been deleted by
     *             specifying the unique stack identifier (stack ID).</p>
     *          </note>
     */
    describeStackEvents(args: DescribeStackEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackEventsCommandOutput>;
    describeStackEvents(args: DescribeStackEventsCommandInput, cb: (err: any, data?: DescribeStackEventsCommandOutput) => void): void;
    describeStackEvents(args: DescribeStackEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackEventsCommandOutput) => void): void;
    /**
     * <p>Returns the stack instance that's associated with the specified stack set, Amazon Web Services account, and Region.</p>
     *          <p>For a list of stack instances that are associated with a specific stack set, use <a>ListStackInstances</a>.</p>
     */
    describeStackInstance(args: DescribeStackInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackInstanceCommandOutput>;
    describeStackInstance(args: DescribeStackInstanceCommandInput, cb: (err: any, data?: DescribeStackInstanceCommandOutput) => void): void;
    describeStackInstance(args: DescribeStackInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackInstanceCommandOutput) => void): void;
    /**
     * <p>Returns a description of the specified resource in the specified stack.</p>
     *          <p>For deleted stacks, DescribeStackResource returns resource information for up to 90 days
     *          after the stack has been deleted.</p>
     */
    describeStackResource(args: DescribeStackResourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackResourceCommandOutput>;
    describeStackResource(args: DescribeStackResourceCommandInput, cb: (err: any, data?: DescribeStackResourceCommandOutput) => void): void;
    describeStackResource(args: DescribeStackResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackResourceCommandOutput) => void): void;
    /**
     * <p>Returns drift information for the resources that have been checked for drift in the
     *          specified stack. This includes actual and expected configuration values for resources where
     *          CloudFormation detects configuration drift.</p>
     *          <p>For a given stack, there will be one <code>StackResourceDrift</code> for each stack
     *          resource that has been checked for drift. Resources that haven't yet been checked for drift
     *          aren't included. Resources that don't currently support drift detection aren't checked, and
     *          so not included. For a list of resources that support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>.</p>
     *          <p>Use <a>DetectStackResourceDrift</a> to detect drift on individual resources,
     *          or <a>DetectStackDrift</a> to detect drift on all supported resources for a
     *          given stack.</p>
     */
    describeStackResourceDrifts(args: DescribeStackResourceDriftsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackResourceDriftsCommandOutput>;
    describeStackResourceDrifts(args: DescribeStackResourceDriftsCommandInput, cb: (err: any, data?: DescribeStackResourceDriftsCommandOutput) => void): void;
    describeStackResourceDrifts(args: DescribeStackResourceDriftsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackResourceDriftsCommandOutput) => void): void;
    /**
     * <p>Returns Amazon Web Services resource descriptions for running and deleted stacks. If
     *             <code>StackName</code> is specified, all the associated resources that are part of the
     *          stack are returned. If <code>PhysicalResourceId</code> is specified, the associated
     *          resources of the stack that the resource belongs to are returned.</p>
     *          <note>
     *             <p>Only the first 100 resources will be returned. If your stack has more resources than
     *             this, you should use <code>ListStackResources</code> instead.</p>
     *          </note>
     *          <p>For deleted stacks, <code>DescribeStackResources</code> returns resource information for
     *          up to 90 days after the stack has been deleted.</p>
     *          <p>You must specify either <code>StackName</code> or <code>PhysicalResourceId</code>, but
     *          not both. In addition, you can specify <code>LogicalResourceId</code> to filter the
     *          returned result. For more information about resources, the <code>LogicalResourceId</code>
     *          and <code>PhysicalResourceId</code>, go to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/">CloudFormation User
     *          Guide</a>.</p>
     *          <note>
     *             <p>A <code>ValidationError</code> is returned if you specify both <code>StackName</code>
     *             and <code>PhysicalResourceId</code> in the same request.</p>
     *          </note>
     */
    describeStackResources(args: DescribeStackResourcesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackResourcesCommandOutput>;
    describeStackResources(args: DescribeStackResourcesCommandInput, cb: (err: any, data?: DescribeStackResourcesCommandOutput) => void): void;
    describeStackResources(args: DescribeStackResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackResourcesCommandOutput) => void): void;
    /**
     * <p>Returns the description for the specified stack; if no stack name was specified, then it
     *          returns the description for all the stacks created.</p>
     *          <note>
     *             <p>If the stack doesn't exist, an <code>ValidationError</code> is returned.</p>
     *          </note>
     */
    describeStacks(args: DescribeStacksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStacksCommandOutput>;
    describeStacks(args: DescribeStacksCommandInput, cb: (err: any, data?: DescribeStacksCommandOutput) => void): void;
    describeStacks(args: DescribeStacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStacksCommandOutput) => void): void;
    /**
     * <p>Returns the description of the specified stack set.</p>
     */
    describeStackSet(args: DescribeStackSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackSetCommandOutput>;
    describeStackSet(args: DescribeStackSetCommandInput, cb: (err: any, data?: DescribeStackSetCommandOutput) => void): void;
    describeStackSet(args: DescribeStackSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackSetCommandOutput) => void): void;
    /**
     * <p>Returns the description of the specified stack set operation.</p>
     */
    describeStackSetOperation(args: DescribeStackSetOperationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStackSetOperationCommandOutput>;
    describeStackSetOperation(args: DescribeStackSetOperationCommandInput, cb: (err: any, data?: DescribeStackSetOperationCommandOutput) => void): void;
    describeStackSetOperation(args: DescribeStackSetOperationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStackSetOperationCommandOutput) => void): void;
    /**
     * <p>Returns detailed information about an extension that has been registered.</p>
     *          <p>If you specify a <code>VersionId</code>, <code>DescribeType</code> returns information
     *          about that specific extension version. Otherwise, it returns information about the default
     *          extension version.</p>
     */
    describeType(args: DescribeTypeCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTypeCommandOutput>;
    describeType(args: DescribeTypeCommandInput, cb: (err: any, data?: DescribeTypeCommandOutput) => void): void;
    describeType(args: DescribeTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTypeCommandOutput) => void): void;
    /**
     * <p>Returns information about an extension's registration, including its current status and
     *          type and version identifiers.</p>
     *          <p>When you initiate a registration request using <code>
     *                <a>RegisterType</a>
     *             </code>, you can then use <code>
     *                <a>DescribeTypeRegistration</a>
     *             </code> to
     *          monitor the progress of that registration request.</p>
     *          <p>Once the registration request has completed, use <code>
     *                <a>DescribeType</a>
     *             </code> to return detailed information about an extension.</p>
     */
    describeTypeRegistration(args: DescribeTypeRegistrationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTypeRegistrationCommandOutput>;
    describeTypeRegistration(args: DescribeTypeRegistrationCommandInput, cb: (err: any, data?: DescribeTypeRegistrationCommandOutput) => void): void;
    describeTypeRegistration(args: DescribeTypeRegistrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTypeRegistrationCommandOutput) => void): void;
    /**
     * <p>Detects whether a stack's actual configuration differs, or has
     *             <i>drifted</i>, from it's expected configuration, as defined in the stack
     *          template and any values specified as template parameters. For each resource in the stack
     *          that supports drift detection, CloudFormation compares the actual configuration of the resource with
     *          its expected template configuration. Only resource properties explicitly defined in the
     *          stack template are checked for drift. A stack is considered to have drifted if one or more
     *          of its resources differ from their expected template configurations. For more information,
     *          see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
     *             Unregulated Configuration Changes to Stacks and Resources</a>.</p>
     *          <p>Use <code>DetectStackDrift</code> to detect drift on all supported resources for a given
     *          stack, or <a>DetectStackResourceDrift</a> to detect drift on individual
     *          resources.</p>
     *          <p>For a list of stack resources that currently support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>.</p>
     *          <p>
     *             <code>DetectStackDrift</code> can take up to several minutes, depending on the number of
     *          resources contained within the stack. Use <a>DescribeStackDriftDetectionStatus</a> to monitor the progress of a detect stack drift operation. Once the drift detection
     *          operation has completed, use <a>DescribeStackResourceDrifts</a> to return drift
     *          information about the stack and its resources.</p>
     *          <p>When detecting drift on a stack, CloudFormation doesn't detect drift on any nested stacks
     *          belonging to that stack. Perform <code>DetectStackDrift</code> directly on the nested stack
     *          itself.</p>
     */
    detectStackDrift(args: DetectStackDriftCommandInput, options?: __HttpHandlerOptions): Promise<DetectStackDriftCommandOutput>;
    detectStackDrift(args: DetectStackDriftCommandInput, cb: (err: any, data?: DetectStackDriftCommandOutput) => void): void;
    detectStackDrift(args: DetectStackDriftCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectStackDriftCommandOutput) => void): void;
    /**
     * <p>Returns information about whether a resource's actual configuration differs, or has
     *             <i>drifted</i>, from it's expected configuration, as defined in the stack
     *          template and any values specified as template parameters. This information includes actual
     *          and expected property values for resources in which CloudFormation detects drift. Only resource
     *          properties explicitly defined in the stack template are checked for drift. For more
     *          information about stack and resource drift, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
     *             Unregulated Configuration Changes to Stacks and Resources</a>.</p>
     *          <p>Use <code>DetectStackResourceDrift</code> to detect drift on individual resources, or
     *             <a>DetectStackDrift</a> to detect drift on all resources in a given stack
     *          that support drift detection.</p>
     *          <p>Resources that don't currently support drift detection can't be checked. For a list of
     *          resources that support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>.</p>
     */
    detectStackResourceDrift(args: DetectStackResourceDriftCommandInput, options?: __HttpHandlerOptions): Promise<DetectStackResourceDriftCommandOutput>;
    detectStackResourceDrift(args: DetectStackResourceDriftCommandInput, cb: (err: any, data?: DetectStackResourceDriftCommandOutput) => void): void;
    detectStackResourceDrift(args: DetectStackResourceDriftCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectStackResourceDriftCommandOutput) => void): void;
    /**
     * <p>Detect drift on a stack set. When CloudFormation performs drift detection on a
     *          stack set, it performs drift detection on the stack associated with each stack instance in
     *          the stack set. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">How CloudFormation performs drift detection on a stack set</a>.</p>
     *          <p>
     *             <code>DetectStackSetDrift</code> returns the <code>OperationId</code> of the stack set
     *          drift detection operation. Use this operation id with <code>
     *                <a>DescribeStackSetOperation</a>
     *             </code> to monitor the progress of the drift
     *          detection operation. The drift detection operation may take some time, depending on the
     *          number of stack instances included in the stack set, in addition to the number of resources
     *          included in each stack.</p>
     *          <p>Once the operation has completed, use the following actions to return drift
     *          information:</p>
     *          <ul>
     *             <li>
     *                <p>Use <code>
     *                      <a>DescribeStackSet</a>
     *                   </code> to return detailed information
     *                about the stack set, including detailed information about the last
     *                   <i>completed</i> drift operation performed on the stack set.
     *                (Information about drift operations that are in progress isn't included.)</p>
     *             </li>
     *             <li>
     *                <p>Use <code>
     *                      <a>ListStackInstances</a>
     *                   </code> to return a list of stack
     *                instances belonging to the stack set, including the drift status and last drift time
     *                checked of each instance.</p>
     *             </li>
     *             <li>
     *                <p>Use <code>
     *                      <a>DescribeStackInstance</a>
     *                   </code> to return detailed
     *                information about a specific stack instance, including its drift status and last
     *                drift time checked.</p>
     *             </li>
     *          </ul>
     *          <p>For more information on performing a drift detection operation on a stack set, see
     *             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">Detecting unmanaged
     *             changes in stack sets</a>.</p>
     *          <p>You can only run a single drift detection operation on a given stack set at one
     *          time.</p>
     *          <p>To stop a drift detection stack set operation, use <code>
     *                <a>StopStackSetOperation</a>
     *             </code>.</p>
     */
    detectStackSetDrift(args: DetectStackSetDriftCommandInput, options?: __HttpHandlerOptions): Promise<DetectStackSetDriftCommandOutput>;
    detectStackSetDrift(args: DetectStackSetDriftCommandInput, cb: (err: any, data?: DetectStackSetDriftCommandOutput) => void): void;
    detectStackSetDrift(args: DetectStackSetDriftCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectStackSetDriftCommandOutput) => void): void;
    /**
     * <p>Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the
     *          resources required to run the template.</p>
     */
    estimateTemplateCost(args: EstimateTemplateCostCommandInput, options?: __HttpHandlerOptions): Promise<EstimateTemplateCostCommandOutput>;
    estimateTemplateCost(args: EstimateTemplateCostCommandInput, cb: (err: any, data?: EstimateTemplateCostCommandOutput) => void): void;
    estimateTemplateCost(args: EstimateTemplateCostCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EstimateTemplateCostCommandOutput) => void): void;
    /**
     * <p>Updates a stack using the input information that was provided when the specified change
     *          set was created. After the call successfully completes, CloudFormation starts updating
     *          the stack. Use the <a>DescribeStacks</a> action to view the status of the
     *          update.</p>
     *          <p>When you execute a change set, CloudFormation deletes all other change sets
     *          associated with the stack because they aren't valid for the updated stack.</p>
     *          <p>If a stack policy is associated with the stack, CloudFormation enforces the policy
     *          during the update. You can't specify a temporary stack policy that overrides the current
     *          policy.</p>
     *          <p>To create a change set for the entire stack hierarchy, <code>IncludeNestedStacks</code>
     *          must have been set to <code>True</code>.</p>
     */
    executeChangeSet(args: ExecuteChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<ExecuteChangeSetCommandOutput>;
    executeChangeSet(args: ExecuteChangeSetCommandInput, cb: (err: any, data?: ExecuteChangeSetCommandOutput) => void): void;
    executeChangeSet(args: ExecuteChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExecuteChangeSetCommandOutput) => void): void;
    /**
     * <p>Returns the stack policy for a specified stack. If a stack doesn't have a policy, a null
     *          value is returned.</p>
     */
    getStackPolicy(args: GetStackPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetStackPolicyCommandOutput>;
    getStackPolicy(args: GetStackPolicyCommandInput, cb: (err: any, data?: GetStackPolicyCommandOutput) => void): void;
    getStackPolicy(args: GetStackPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStackPolicyCommandOutput) => void): void;
    /**
     * <p>Returns the template body for a specified stack. You can get the template for running or
     *          deleted stacks.</p>
     *          <p>For deleted stacks, <code>GetTemplate</code> returns the template for up to 90 days
     *          after the stack has been deleted.</p>
     *          <note>
     *             <p>If the template doesn't exist, a <code>ValidationError</code> is returned.</p>
     *          </note>
     */
    getTemplate(args: GetTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetTemplateCommandOutput>;
    getTemplate(args: GetTemplateCommandInput, cb: (err: any, data?: GetTemplateCommandOutput) => void): void;
    getTemplate(args: GetTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTemplateCommandOutput) => void): void;
    /**
     * <p>Returns information about a new or existing template. The
     *             <code>GetTemplateSummary</code> action is useful for viewing parameter information, such
     *          as default parameter values and parameter types, before you create or update a stack or
     *          stack set.</p>
     *          <p>You can use the <code>GetTemplateSummary</code> action when you submit a template, or
     *          you can get template information for a stack set, or a running or deleted stack.</p>
     *          <p>For deleted stacks, <code>GetTemplateSummary</code> returns the template information for
     *          up to 90 days after the stack has been deleted. If the template doesn't exist, a
     *             <code>ValidationError</code> is returned.</p>
     */
    getTemplateSummary(args: GetTemplateSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetTemplateSummaryCommandOutput>;
    getTemplateSummary(args: GetTemplateSummaryCommandInput, cb: (err: any, data?: GetTemplateSummaryCommandOutput) => void): void;
    getTemplateSummary(args: GetTemplateSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTemplateSummaryCommandOutput) => void): void;
    /**
     * <p>Import existing stacks into a new stack sets. Use the stack import operation to import
     *          up to 10 stacks into a new stack set in the same account as the source stack or in a
     *          different administrator account and Region, by specifying the stack ID of the stack you
     *          intend to import.</p>
     *          <note>
     *             <p>
     *                <code>ImportStacksToStackSet</code> is only supported by self-managed
     *             permissions.</p>
     *          </note>
     */
    importStacksToStackSet(args: ImportStacksToStackSetCommandInput, options?: __HttpHandlerOptions): Promise<ImportStacksToStackSetCommandOutput>;
    importStacksToStackSet(args: ImportStacksToStackSetCommandInput, cb: (err: any, data?: ImportStacksToStackSetCommandOutput) => void): void;
    importStacksToStackSet(args: ImportStacksToStackSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportStacksToStackSetCommandOutput) => void): void;
    /**
     * <p>Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the <code>CREATE_IN_PROGRESS</code> or
     *             <code>CREATE_PENDING</code> state.</p>
     */
    listChangeSets(args: ListChangeSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListChangeSetsCommandOutput>;
    listChangeSets(args: ListChangeSetsCommandInput, cb: (err: any, data?: ListChangeSetsCommandOutput) => void): void;
    listChangeSets(args: ListChangeSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChangeSetsCommandOutput) => void): void;
    /**
     * <p>Lists all exported output values in the account and Region in which you call this
     *          action. Use this action to see the exported output values that you can import into other
     *          stacks. To import values, use the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html">
     *                <code>Fn::ImportValue</code>
     *             </a> function.</p>
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html">
     *             CloudFormation export stack output values</a>.</p>
     */
    listExports(args: ListExportsCommandInput, options?: __HttpHandlerOptions): Promise<ListExportsCommandOutput>;
    listExports(args: ListExportsCommandInput, cb: (err: any, data?: ListExportsCommandOutput) => void): void;
    listExports(args: ListExportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExportsCommandOutput) => void): void;
    /**
     * <p>Lists all stacks that are importing an exported output value. To modify or remove an
     *          exported output value, first use this action to see which stacks are using it. To see the
     *          exported output values in your account, see <a>ListExports</a>.</p>
     *          <p>For more information about importing an exported output value, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html">
     *                <code>Fn::ImportValue</code>
     *             </a> function.</p>
     */
    listImports(args: ListImportsCommandInput, options?: __HttpHandlerOptions): Promise<ListImportsCommandOutput>;
    listImports(args: ListImportsCommandInput, cb: (err: any, data?: ListImportsCommandOutput) => void): void;
    listImports(args: ListImportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListImportsCommandOutput) => void): void;
    /**
     * <p>Returns summary information about stack instances that are associated with the specified
     *          stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.</p>
     */
    listStackInstances(args: ListStackInstancesCommandInput, options?: __HttpHandlerOptions): Promise<ListStackInstancesCommandOutput>;
    listStackInstances(args: ListStackInstancesCommandInput, cb: (err: any, data?: ListStackInstancesCommandOutput) => void): void;
    listStackInstances(args: ListStackInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStackInstancesCommandOutput) => void): void;
    /**
     * <p>Returns descriptions of all resources of the specified stack.</p>
     *          <p>For deleted stacks, ListStackResources returns resource information for up to 90 days
     *          after the stack has been deleted.</p>
     */
    listStackResources(args: ListStackResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListStackResourcesCommandOutput>;
    listStackResources(args: ListStackResourcesCommandInput, cb: (err: any, data?: ListStackResourcesCommandOutput) => void): void;
    listStackResources(args: ListStackResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStackResourcesCommandOutput) => void): void;
    /**
     * <p>Returns the summary information for stacks whose status matches the specified
     *          StackStatusFilter. Summary information for stacks that have been deleted is kept for 90
     *          days after the stack is deleted. If no StackStatusFilter is specified, summary information
     *          for all stacks is returned (including existing stacks and stacks that have been
     *          deleted).</p>
     */
    listStacks(args: ListStacksCommandInput, options?: __HttpHandlerOptions): Promise<ListStacksCommandOutput>;
    listStacks(args: ListStacksCommandInput, cb: (err: any, data?: ListStacksCommandOutput) => void): void;
    listStacks(args: ListStacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStacksCommandOutput) => void): void;
    /**
     * <p>Returns summary information about the results of a stack set operation.</p>
     */
    listStackSetOperationResults(args: ListStackSetOperationResultsCommandInput, options?: __HttpHandlerOptions): Promise<ListStackSetOperationResultsCommandOutput>;
    listStackSetOperationResults(args: ListStackSetOperationResultsCommandInput, cb: (err: any, data?: ListStackSetOperationResultsCommandOutput) => void): void;
    listStackSetOperationResults(args: ListStackSetOperationResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStackSetOperationResultsCommandOutput) => void): void;
    /**
     * <p>Returns summary information about operations performed on a stack set.</p>
     */
    listStackSetOperations(args: ListStackSetOperationsCommandInput, options?: __HttpHandlerOptions): Promise<ListStackSetOperationsCommandOutput>;
    listStackSetOperations(args: ListStackSetOperationsCommandInput, cb: (err: any, data?: ListStackSetOperationsCommandOutput) => void): void;
    listStackSetOperations(args: ListStackSetOperationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStackSetOperationsCommandOutput) => void): void;
    /**
     * <p>Returns summary information about stack sets that are associated with the user.</p>
     *          <ul>
     *             <li>
     *                <p>[Self-managed permissions] If you set the <code>CallAs</code> parameter to
     *                   <code>SELF</code> while signed in to your Amazon Web Services account,
     *                   <code>ListStackSets</code> returns all self-managed stack sets in your Amazon Web Services account.</p>
     *             </li>
     *             <li>
     *                <p>[Service-managed permissions] If you set the <code>CallAs</code> parameter to
     *                   <code>SELF</code> while signed in to the organization's management account, <code>ListStackSets</code> returns all stack sets in the
     *                management account.</p>
     *             </li>
     *             <li>
     *                <p>[Service-managed permissions] If you set the <code>CallAs</code> parameter to
     *                   <code>DELEGATED_ADMIN</code> while signed in to your member account,
     *                   <code>ListStackSets</code> returns all stack sets with service-managed permissions
     *                in the management account.</p>
     *             </li>
     *          </ul>
     */
    listStackSets(args: ListStackSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListStackSetsCommandOutput>;
    listStackSets(args: ListStackSetsCommandInput, cb: (err: any, data?: ListStackSetsCommandOutput) => void): void;
    listStackSets(args: ListStackSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStackSetsCommandOutput) => void): void;
    /**
     * <p>Returns a list of registration tokens for the specified extension(s).</p>
     */
    listTypeRegistrations(args: ListTypeRegistrationsCommandInput, options?: __HttpHandlerOptions): Promise<ListTypeRegistrationsCommandOutput>;
    listTypeRegistrations(args: ListTypeRegistrationsCommandInput, cb: (err: any, data?: ListTypeRegistrationsCommandOutput) => void): void;
    listTypeRegistrations(args: ListTypeRegistrationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypeRegistrationsCommandOutput) => void): void;
    /**
     * <p>Returns summary information about extension that have been registered with CloudFormation.</p>
     */
    listTypes(args: ListTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListTypesCommandOutput>;
    listTypes(args: ListTypesCommandInput, cb: (err: any, data?: ListTypesCommandOutput) => void): void;
    listTypes(args: ListTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypesCommandOutput) => void): void;
    /**
     * <p>Returns summary information about the versions of an extension.</p>
     */
    listTypeVersions(args: ListTypeVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListTypeVersionsCommandOutput>;
    listTypeVersions(args: ListTypeVersionsCommandInput, cb: (err: any, data?: ListTypeVersionsCommandOutput) => void): void;
    listTypeVersions(args: ListTypeVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypeVersionsCommandOutput) => void): void;
    /**
     * <p>Publishes the specified extension to the CloudFormation registry as a public
     *          extension in this region. Public extensions are available for use by all CloudFormation users. For more information on publishing extensions, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html">Publishing extensions to make them available for public use</a> in the
     *                <i>CloudFormation CLI User Guide</i>.</p>
     *          <p>To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html">RegisterPublisher</a>.</p>
     */
    publishType(args: PublishTypeCommandInput, options?: __HttpHandlerOptions): Promise<PublishTypeCommandOutput>;
    publishType(args: PublishTypeCommandInput, cb: (err: any, data?: PublishTypeCommandOutput) => void): void;
    publishType(args: PublishTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishTypeCommandOutput) => void): void;
    /**
     * <p>Reports progress of a resource handler to CloudFormation.</p>
     *          <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. Don't use this API in your code.</p>
     */
    recordHandlerProgress(args: RecordHandlerProgressCommandInput, options?: __HttpHandlerOptions): Promise<RecordHandlerProgressCommandOutput>;
    recordHandlerProgress(args: RecordHandlerProgressCommandInput, cb: (err: any, data?: RecordHandlerProgressCommandOutput) => void): void;
    recordHandlerProgress(args: RecordHandlerProgressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RecordHandlerProgressCommandOutput) => void): void;
    /**
     * <p>Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users.
     *          This publisher ID applies to your account in all Amazon Web Services Regions.</p>
     *          <p>For information on requirements for registering as a public extension publisher, see
     *             <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs">Registering your account to publish CloudFormation
     *             extensions</a> in the <i>CloudFormation CLI User
     *          Guide</i>.</p>
     *          <p></p>
     */
    registerPublisher(args: RegisterPublisherCommandInput, options?: __HttpHandlerOptions): Promise<RegisterPublisherCommandOutput>;
    registerPublisher(args: RegisterPublisherCommandInput, cb: (err: any, data?: RegisterPublisherCommandOutput) => void): void;
    registerPublisher(args: RegisterPublisherCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterPublisherCommandOutput) => void): void;
    /**
     * <p>Registers an extension with the CloudFormation service. Registering an
     *          extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:</p>
     *          <ul>
     *             <li>
     *                <p>Validating the extension schema.</p>
     *             </li>
     *             <li>
     *                <p>Determining which handlers, if any, have been specified for the extension.</p>
     *             </li>
     *             <li>
     *                <p>Making the extension available for use in your account.</p>
     *             </li>
     *          </ul>
     *          <p>For more information on how to develop extensions and ready them for registration, see
     *             <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html">Creating Resource
     *             Providers</a> in the <i>CloudFormation CLI User
     *          Guide</i>.</p>
     *          <p>You can have a maximum of 50 resource extension versions registered at a time. This
     *          maximum is per account and per region. Use <a href="AWSCloudFormation/latest/APIReference/API_DeregisterType.html">DeregisterType</a> to deregister specific extension versions if necessary.</p>
     *          <p>Once you have initiated a registration request using <code>
     *                <a>RegisterType</a>
     *             </code>, you can use <code>
     *                <a>DescribeTypeRegistration</a>
     *             </code> to
     *          monitor the progress of the registration request.</p>
     *          <p>Once you have registered a private extension in your account and region, use <a href="AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a> to specify configuration properties for the extension. For
     *          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
     */
    registerType(args: RegisterTypeCommandInput, options?: __HttpHandlerOptions): Promise<RegisterTypeCommandOutput>;
    registerType(args: RegisterTypeCommandInput, cb: (err: any, data?: RegisterTypeCommandOutput) => void): void;
    registerType(args: RegisterTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterTypeCommandOutput) => void): void;
    /**
     * <p>When specifying <code>RollbackStack</code>, you preserve the state of previously
     *          provisioned resources when an operation fails. You can check the status of the stack
     *          through the <a>DescribeStacks</a> operation.</p>
     *          <p>Rolls back the specified stack to the last known stable state from
     *             <code>CREATE_FAILED</code> or <code>UPDATE_FAILED</code> stack statuses.</p>
     *          <p>This operation will delete a stack if it doesn't contain a last known stable state. A
     *          last known stable state includes any status in a <code>*_COMPLETE</code>. This includes the
     *          following stack statuses.</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>CREATE_COMPLETE</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>UPDATE_COMPLETE</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>UPDATE_ROLLBACK_COMPLETE</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>IMPORT_COMPLETE</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>IMPORT_ROLLBACK_COMPLETE</code>
     *                </p>
     *             </li>
     *          </ul>
     */
    rollbackStack(args: RollbackStackCommandInput, options?: __HttpHandlerOptions): Promise<RollbackStackCommandOutput>;
    rollbackStack(args: RollbackStackCommandInput, cb: (err: any, data?: RollbackStackCommandOutput) => void): void;
    rollbackStack(args: RollbackStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RollbackStackCommandOutput) => void): void;
    /**
     * <p>Sets a stack policy for a specified stack.</p>
     */
    setStackPolicy(args: SetStackPolicyCommandInput, options?: __HttpHandlerOptions): Promise<SetStackPolicyCommandOutput>;
    setStackPolicy(args: SetStackPolicyCommandInput, cb: (err: any, data?: SetStackPolicyCommandOutput) => void): void;
    setStackPolicy(args: SetStackPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetStackPolicyCommandOutput) => void): void;
    /**
     * <p>Specifies the configuration data for a registered CloudFormation extension, in
     *          the given account and region.</p>
     *          <p>To view the current configuration data for an extension, refer to the
     *             <code>ConfigurationSchema</code> element of <a href="AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType</a>.
     *          For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the
     *             <i>CloudFormation User Guide</i>.</p>
     *          <important>
     *             <p>It's strongly recommended that you use dynamic references to restrict sensitive
     *             configuration definitions, such as third-party credentials. For more details on dynamic
     *             references, see <a href="https://docs.aws.amazon.com/">Using dynamic references to specify
     *                template values</a> in the <i>CloudFormation User
     *             Guide</i>.</p>
     *          </important>
     */
    setTypeConfiguration(args: SetTypeConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<SetTypeConfigurationCommandOutput>;
    setTypeConfiguration(args: SetTypeConfigurationCommandInput, cb: (err: any, data?: SetTypeConfigurationCommandOutput) => void): void;
    setTypeConfiguration(args: SetTypeConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetTypeConfigurationCommandOutput) => void): void;
    /**
     * <p>Specify the default version of an extension. The default version of an extension will be
     *          used in CloudFormation operations.</p>
     */
    setTypeDefaultVersion(args: SetTypeDefaultVersionCommandInput, options?: __HttpHandlerOptions): Promise<SetTypeDefaultVersionCommandOutput>;
    setTypeDefaultVersion(args: SetTypeDefaultVersionCommandInput, cb: (err: any, data?: SetTypeDefaultVersionCommandOutput) => void): void;
    setTypeDefaultVersion(args: SetTypeDefaultVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetTypeDefaultVersionCommandOutput) => void): void;
    /**
     * <p>Sends a signal to the specified resource with a success or failure status. You can use
     *          the <code>SignalResource</code> operation in conjunction with a creation policy or update policy. CloudFormation doesn't proceed with a stack creation or update until resources receive
     *          the required number of signals or the timeout period is exceeded. The <code>SignalResource</code> operation is
     *          useful in cases where you want to send signals from anywhere other than an Amazon EC2
     *          instance.</p>
     */
    signalResource(args: SignalResourceCommandInput, options?: __HttpHandlerOptions): Promise<SignalResourceCommandOutput>;
    signalResource(args: SignalResourceCommandInput, cb: (err: any, data?: SignalResourceCommandOutput) => void): void;
    signalResource(args: SignalResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SignalResourceCommandOutput) => void): void;
    /**
     * <p>Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.</p>
     */
    stopStackSetOperation(args: StopStackSetOperationCommandInput, options?: __HttpHandlerOptions): Promise<StopStackSetOperationCommandOutput>;
    stopStackSetOperation(args: StopStackSetOperationCommandInput, cb: (err: any, data?: StopStackSetOperationCommandOutput) => void): void;
    stopStackSetOperation(args: StopStackSetOperationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopStackSetOperationCommandOutput) => void): void;
    /**
     * <p>Tests a registered extension to make sure it meets all necessary requirements for being
     *          published in the CloudFormation registry.</p>
     *          <ul>
     *             <li>
     *                <p>For resource types, this includes passing all contracts tests defined for the
     *                type.</p>
     *             </li>
     *             <li>
     *                <p>For modules, this includes determining if the module's model meets all necessary
     *                requirements.</p>
     *             </li>
     *          </ul>
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing">Testing your public extension prior to publishing</a> in the <i>CloudFormation CLI User Guide</i>.</p>
     *          <p>If you don't specify a version, CloudFormation uses the default version of the
     *          extension in your account and region for testing.</p>
     *          <p>To perform testing, CloudFormation assumes the execution role specified when
     *          the type was registered. For more information, see <a href="AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
     *          <p>Once you've initiated testing on an extension using <code>TestType</code>, you can use
     *             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType</a> to monitor the current test status and test
     *          status description for the extension.</p>
     *          <p>An extension must have a test status of <code>PASSED</code> before it can be published.
     *          For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a>
     *          in the <i>CloudFormation CLI User Guide</i>.</p>
     */
    testType(args: TestTypeCommandInput, options?: __HttpHandlerOptions): Promise<TestTypeCommandOutput>;
    testType(args: TestTypeCommandInput, cb: (err: any, data?: TestTypeCommandOutput) => void): void;
    testType(args: TestTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestTypeCommandOutput) => void): void;
    /**
     * <p>Updates a stack as specified in the template. After the call completes successfully, the
     *          stack update starts. You can check the status of the stack through the <a>DescribeStacks</a> action.</p>
     *          <p>To get a copy of the template for an existing stack, you can use the <a>GetTemplate</a> action.</p>
     *          <p>For more information about creating an update template, updating a stack, and monitoring
     *          the progress of the update, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html">Updating a
     *             Stack</a>.</p>
     */
    updateStack(args: UpdateStackCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStackCommandOutput>;
    updateStack(args: UpdateStackCommandInput, cb: (err: any, data?: UpdateStackCommandOutput) => void): void;
    updateStack(args: UpdateStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStackCommandOutput) => void): void;
    /**
     * <p>Updates the parameter values for stack instances for the specified accounts, within the
     *          specified Amazon Web Services Regions. A stack instance refers to a stack in a specific
     *          account and Region.</p>
     *          <p>You can only update stack instances in Amazon Web Services Regions and accounts where
     *          they already exist; to create additional stack instances, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html">CreateStackInstances</a>.</p>
     *          <p>During stack set updates, any parameters overridden for a stack instance aren't updated,
     *          but retain their overridden value.</p>
     *          <p>You can only update the parameter <i>values</i> that are specified in the
     *          stack set; to add or delete a parameter itself, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update the stack set template. If you add a parameter to a
     *          template, before you can override the parameter value specified in the stack set you must
     *          first use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update all stack instances with the updated template and
     *          parameter value specified in the stack set. Once a stack instance has been updated with the
     *          new parameter, you can then override the parameter value using
     *             <code>UpdateStackInstances</code>.</p>
     */
    updateStackInstances(args: UpdateStackInstancesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStackInstancesCommandOutput>;
    updateStackInstances(args: UpdateStackInstancesCommandInput, cb: (err: any, data?: UpdateStackInstancesCommandOutput) => void): void;
    updateStackInstances(args: UpdateStackInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStackInstancesCommandOutput) => void): void;
    /**
     * <p>Updates the stack set, and associated stack instances in the specified accounts and
     *             Amazon Web Services Regions.</p>
     *          <p>Even if the stack set operation created by updating the stack set fails (completely or
     *          partially, below or above a specified failure tolerance), the stack set is updated with
     *          your changes. Subsequent <a>CreateStackInstances</a> calls on the specified
     *          stack set use the updated stack set.</p>
     */
    updateStackSet(args: UpdateStackSetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStackSetCommandOutput>;
    updateStackSet(args: UpdateStackSetCommandInput, cb: (err: any, data?: UpdateStackSetCommandOutput) => void): void;
    updateStackSet(args: UpdateStackSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStackSetCommandOutput) => void): void;
    /**
     * <p>Updates termination protection for the specified stack. If a user attempts to delete a
     *          stack with termination protection enabled, the operation fails and the stack remains
     *          unchanged. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a
     *             Stack From Being Deleted</a> in the <i>CloudFormation User Guide</i>.</p>
     *          <p>For <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested
     *             stacks</a>, termination protection is set on the root stack and can't be changed
     *          directly on the nested stack.</p>
     */
    updateTerminationProtection(args: UpdateTerminationProtectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTerminationProtectionCommandOutput>;
    updateTerminationProtection(args: UpdateTerminationProtectionCommandInput, cb: (err: any, data?: UpdateTerminationProtectionCommandOutput) => void): void;
    updateTerminationProtection(args: UpdateTerminationProtectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTerminationProtectionCommandOutput) => void): void;
    /**
     * <p>Validates a specified template. CloudFormation first checks if the template is
     *          valid JSON. If it isn't, CloudFormation checks if the template is valid YAML. If
     *          both these checks fail, CloudFormation returns a template validation error.</p>
     */
    validateTemplate(args: ValidateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<ValidateTemplateCommandOutput>;
    validateTemplate(args: ValidateTemplateCommandInput, cb: (err: any, data?: ValidateTemplateCommandOutput) => void): void;
    validateTemplate(args: ValidateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateTemplateCommandOutput) => void): void;
}
