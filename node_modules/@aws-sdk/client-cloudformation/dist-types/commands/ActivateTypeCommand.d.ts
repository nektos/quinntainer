import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFormationClient";
import { ActivateTypeInput, ActivateTypeOutput } from "../models/models_0";
export interface ActivateTypeCommandInput extends ActivateTypeInput {
}
export interface ActivateTypeCommandOutput extends ActivateTypeOutput, __MetadataBearer {
}
/**
 * <p>Activates a public third-party extension, making it available for use in stack
 *          templates. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html">Using
 *             public extensions</a> in the <i>CloudFormation User Guide</i>.</p>
 *          <p>Once you have activated a public third-party extension in your account and region, use
 *             <a href="AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a> to specify configuration properties for the extension. For
 *          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFormationClient, ActivateTypeCommand } from "@aws-sdk/client-cloudformation"; // ES Modules import
 * // const { CloudFormationClient, ActivateTypeCommand } = require("@aws-sdk/client-cloudformation"); // CommonJS import
 * const client = new CloudFormationClient(config);
 * const command = new ActivateTypeCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link ActivateTypeCommandInput} for command's `input` shape.
 * @see {@link ActivateTypeCommandOutput} for command's `response` shape.
 * @see {@link CloudFormationClientResolvedConfig | config} for CloudFormationClient's `config` shape.
 *
 */
export declare class ActivateTypeCommand extends $Command<ActivateTypeCommandInput, ActivateTypeCommandOutput, CloudFormationClientResolvedConfig> {
    readonly input: ActivateTypeCommandInput;
    constructor(input: ActivateTypeCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ActivateTypeCommandInput, ActivateTypeCommandOutput>;
    private serialize;
    private deserialize;
}
