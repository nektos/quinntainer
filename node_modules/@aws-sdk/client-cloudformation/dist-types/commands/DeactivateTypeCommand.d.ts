import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFormationClient";
import { DeactivateTypeInput, DeactivateTypeOutput } from "../models/models_0";
export interface DeactivateTypeCommandInput extends DeactivateTypeInput {
}
export interface DeactivateTypeCommandOutput extends DeactivateTypeOutput, __MetadataBearer {
}
/**
 * <p>Deactivates a public extension that was previously activated in this account and
 *          region.</p>
 *          <p>Once deactivated, an extension can't be used in any CloudFormation operation.
 *          This includes stack update operations where the stack template includes the extension, even
 *          if no updates are being made to the extension. In addition, deactivated extensions aren't
 *          automatically updated if a new version of the extension is released.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFormationClient, DeactivateTypeCommand } from "@aws-sdk/client-cloudformation"; // ES Modules import
 * // const { CloudFormationClient, DeactivateTypeCommand } = require("@aws-sdk/client-cloudformation"); // CommonJS import
 * const client = new CloudFormationClient(config);
 * const command = new DeactivateTypeCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link DeactivateTypeCommandInput} for command's `input` shape.
 * @see {@link DeactivateTypeCommandOutput} for command's `response` shape.
 * @see {@link CloudFormationClientResolvedConfig | config} for CloudFormationClient's `config` shape.
 *
 */
export declare class DeactivateTypeCommand extends $Command<DeactivateTypeCommandInput, DeactivateTypeCommandOutput, CloudFormationClientResolvedConfig> {
    readonly input: DeactivateTypeCommandInput;
    constructor(input: DeactivateTypeCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeactivateTypeCommandInput, DeactivateTypeCommandOutput>;
    private serialize;
    private deserialize;
}
